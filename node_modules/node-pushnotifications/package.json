{
  "name": "node-pushnotifications",
  "description": "A cross-platform push service for node.js",
  "version": "1.0.17",
  "author": {
    "name": "AppFeel",
    "email": "info@appfeel.com"
  },
  "scripts": {
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "test-cover": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- test/ --compilers jsx:babel-core/register --recursive; opn ./coverage/lcov-report/index.html",
    "test": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- test/ --compilers jsx:babel-core/register --recursive --report lcovonly",
    "build": "./node_modules/.bin/babel src -d lib",
    "prepublish": "npm run lint && npm test && npm run build",
    "lint": "eslint src/**/*.js",
    "test-alone": "./node_modules/.bin/_mocha test/ --compilers jsx:babel-core/register --recursive -w"
  },
  "keywords": [
    "notifications",
    "push",
    "push notifications",
    "apple",
    "ios",
    "iphone",
    "ipad",
    "apns",
    "google",
    "android",
    "gcm",
    "fcm",
    "amazon",
    "kindle",
    "adm",
    "microsoft",
    "windows",
    "wphone",
    "windows phone",
    "wns",
    "mpns"
  ],
  "main": "index.js",
  "bugs": {
    "url": "https://github.com/appfeel/node-pushnotifications",
    "email": "info@appfeel.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/appfeel/node-pushnotifications.git"
  },
  "dependencies": {
    "apn": "^2.1.1",
    "node-adm": "^0.9.1",
    "node-gcm": "^0.14.4",
    "wns": "^0.5.3"
  },
  "engines": {
    "node": ">= 4.6.0"
  },
  "eslintConfig": {
    "ecmaVersion": 6,
    "env": {
      "es6": true,
      "node": true
    }
  },
  "readmeFilename": "README.md",
  "homepage": "https://github.com/appfeel/node-pushnotifications",
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-core": "^6.17.0",
    "babel-preset-es2015": "^6.16.0",
    "chai": "^3.5.0",
    "coveralls": "^2.11.16",
    "eslint": "^3.8.0",
    "eslint-config-airbnb": "^12.0.0",
    "eslint-plugin-import": "^1.16.0",
    "eslint-plugin-jsx-a11y": "^2.2.3",
    "eslint-plugin-react": "^6.4.1",
    "istanbul": "^1.1.0-alpha.1",
    "mocha": "^3.1.2",
    "opn-cli": "^3.1.0",
    "sinon": "^1.17.6"
  },
  "license": "MIT",
  "contributors": [
    {
      "name": "Alexander Friedl",
      "email": "mail@alexanderfriedl.com",
      "url": "https://github.com/alex-friedl"
    }
  ],
  "readme": "Node Push Notifications\n========\n\nA node.js module for interfacing with Apple Push Notification, Google Cloud Messaging, Windows Push Notification and Amazon Device Messaging services.\n\n[![License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://npmjs.org/package/node-pushnotifications)\n[![NPM version](http://img.shields.io/npm/v/node-pushnotifications.svg?style=flat)](https://npmjs.org/package/node-pushnotifications)\n[![Downloads](http://img.shields.io/npm/dm/node-pushnotifications.svg?style=flat)](https://npmjs.org/package/node-pushnotifications)\n[![Build Status](http://img.shields.io/travis/appfeel/node-pushnotifications.svg?style=flat)](https://travis-ci.org/appfeel/node-pushnotifications)\n[![Coverage Status](https://coveralls.io/repos/github/appfeel/node-pushnotifications/badge.svg?branch=master)](https://coveralls.io/github/appfeel/node-pushnotifications?branch=master)\n[![Dependencies](https://david-dm.org/appfeel/node-pushnotifications/status.svg)](https://david-dm.org/appfeel/node-pushnotifications)\n\n**NOTE:** Version 1.x has completely been redesigned to be compatible with new apn 2.x.\n\n## Installation\n\n```bash\nnpm install node-pushnotifications --save\n```\n\n## Features\n\n- Powerful and intuitive.\n- Multi platform push notifications.\n- Automatically detects destination device type.\n- Unified error handling.\n- Written in ES6, compatible with ES5 through babel transpilation.\n\n## Usage \n\n### 1. Import and setup push module:\n\nInclude the settings for each device type. You should only include the settings for the devices that you expect to have. I.e. if your app is only available for android or for ios, you should only include `gcm` or `apn` respectively.\n\n```js\nconst settings = {\n    gcm: {\n        id: null,\n        ...\n    },\n    apn: {\n        token: {\n            key: './certs/key.p8', // optionally: fs.readFileSync('./certs/key.p8')\n            keyId: 'ABCD',\n            teamId: 'EFGH',\n        },\n        ...\n    },\n    adm: {\n        client_id: null,\n        client_secret: null,\n        ...\n    },\n    wns: {\n        client_id: null,\n        client_secret: null,\n        notificationMethod: 'sendTileSquareBlock',\n        ...\n    }\n};\nconst PushNotifications = new require('node-pushnotifications');\nconst push = new PushNotifications(settings);\n```\n\n* GCM options: see [node-gcm](https://github.com/ToothlessGear/node-gcm#custom-gcm-request-options)\n* APN options: see [node-apn](https://github.com/node-apn/node-apn/blob/master/doc/provider.markdown)\n* ADM options: see [node-adm](https://github.com/umano/node-adm)\n* WNS options: see [wns](https://github.com/tjanczuk/wns)\n\n*iOS:* It is recomended to use [provider authentication tokens](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html). You need the .p8 certificate that you can obtain in your [account memebership](https://cloud.githubusercontent.com/assets/8225312/20380437/599a767c-aca2-11e6-82bd-3cbfc2feee33.png). You should ask for an *Apple Push Notification Authentication Key (Sandbox & Production)* or *Apple Push Notification service SSL (Sandbox & Production)*. However, you can also use certificates. See [node-apn](https://github.com/node-apn/node-apn/wiki/Preparing-Certificates) to see how to prepare cert.pem and key.pem. \n\n###Â 2. Define destination device ID. You can send to multiple devices, independently of platform, creating an array with different destination device IDs.\n\n```js\n// Single destination\nconst registrationIds = 'INSERT_YOUR_DEVICE_ID';\n\n// Multiple destinations\nconst registrationIds = [];\nregistrationIds.push('INSERT_YOUR_DEVICE_ID');\nregistrationIds.push('INSERT_OTHER_DEVICE_ID');\n```\n\n*Android:* If you provide more than 1.000 registration tokens, they will automatically be splitted in 1.000 chunks (see [this issue in gcm repo](https://github.com/ToothlessGear/node-gcm/issues/42))\n\n### 3. Create a JSON object with a title and message and send the notification.\n\nBoth `title` and `body` fields are required (or `alert` for ios). The other fields are optional (see below how the message is created for each device type):\n\n```js\nconst data = {\n    title: 'New push notification', // REQUIRED\n    body: 'Powered by AppFeel', // REQUIRED\n    custom: {\n        sender: 'AppFeel',\n    },\n    priority: 'high', // gcm, apn. Supported values are 'high' or 'normal' (gcm). Will be translated to 10 and 5 for apn. Defaults to 'high'\n    collapseKey: '', // gcm for android, used as collapseId in apn\n    contentAvailable: true, // gcm for android\n    delayWhileIdle: true, // gcm for android\n    restrictedPackageName: '', // gcm for android\n    dryRun: false, // gcm for android\n    icon: '', // gcm for android\n    tag: '', // gcm for android\n    color: '', // gcm for android\n    clickAction: '', // gcm for android. In ios, category will be used if not supplied\n    locKey: '', // gcm, apn\n    bodyLocArgs: '', // gcm, apn\n    titleLocKey: '', // gcm, apn\n    titleLocArgs: '', // gcm, apn\n    retries: 1, // gcm, apn\n    encoding: '', // apn\n    badge: 2, // gcm for ios, apn\n    sound: 'ping.aiff', // gcm, apn\n    alert: {}, // apn, will take precedence over title and body\n    // alert: '', // It is also accepted a text message in alert\n    titleLocKey: '', // apn and gcm for ios\n    titleLocArgs: '', // apn and gcm for ios\n    launchImage: '', // apn and gcm for ios\n    action: '', // apn and gcm for ios\n    topic: '', // apn and gcm for ios\n    category: '', // apn and gcm for ios\n    contentAvailable: '', // apn and gcm for ios\n    mdm: '', // apn and gcm for ios\n    urlArgs: '', // apn and gcm for ios\n    truncateAtWordEnd: true, // apn and gcm for ios\n    mutableContent: 0, // apn\n    expiry: Math.floor(Date.now() / 1000) + 28 * 86400, // seconds\n    timeToLive: 28 * 86400, // if both expiry and timeToLive are given, expiry will take precedency\n    headers: [], // wns\n    launch: '', // wns\n    duration: '', // wns\n    consolidationKey: 'my notification', // ADM\n};\n\n// You can use it in node callback style\npush.send(registrationIds, data, (err, result) => {\n    if (err) {\n        console.log(err);\n    } else {\n\t    console.log(result);\n    }\n});\n\n// Or you could use it as a promise:\npush.send(registrationIds, data)\n    .then((results) => { ... })\n    .catch((err) => { ... });\n```\n\n- `err` will be null if all went fine, will return the error otherwise.\n- `result` will contain an array with the following objects (one object for each device type found in device registration id's):\n\n```js\n[\n    {\n        method: 'gcm', // The method used send notifications and which this info is related to\n        multicastId: [], // (only Android) Array with unique ID (number) identifying the multicast message, one identifier for each chunk of 1.000 notifications)\n        success: 0, // Number of notifications that have been successfully sent. It does not mean that the notification has been deliveried.\n        failure: 0, // Number of notifications that have been failed to be send.\n        message: [{\n            messageId: '', // (only for android) String specifying a unique ID for each successfully processed message or undefined if error\n            regId: value, // The registrationId (device token id)\n            error: new Error('unknown'), // If any, there will be an Error object here\n        }],\n    },\n    {\n        method: 'apn',\n        ... // Same structure here\n    },\n    {\n        method: 'wns',\n        ... // Same structure here\n    },\n    {\n        method: 'adm',\n        ... // Same structure here\n    },\n]\n```\n\n## GCM\n\n**NOTE:** If you provide more than 1.000 registration tokens, they will automatically be splitted in 1.000 chunks (see [this issue in gcm repo](https://github.com/ToothlessGear/node-gcm/issues/42))\n\nThe following parameters are used to create a GCM message. See https://developers.google.com/cloud-messaging/http-server-ref#table5 for more info:\n\n```js\n    // Set default custom data from data\n    let custom;\n    if (typeof data.custom === 'string') {\n        custom = {\n            message: data.custom,\n        };\n    } else if (typeof data.custom === 'object') {\n        custom = Object.assign({}, data.custom);\n    } else {\n        custom = {\n            data: data.custom,\n        };\n    }\n\n    custom.title = custom.title || data.title || '';\n    custom.message = custom.message || data.body || '';\n    custom.sound = custom.sound || data.sound || undefined;\n    custom.icon = custom.icon || data.icon || undefined;\n    custom.msgcnt = custom.msgcnt || data.badge || undefined;\n    if (opts.phonegap === true && data.contentAvailable) {\n        custom['content-available'] = 1;\n    }\n\n    const message = new gcm.Message({ // See https://developers.google.com/cloud-messaging/http-server-ref#table5\n        collapseKey: data.collapseKey,\n        priority: data.priority === 'normal' ? data.priority : 'high',\n        contentAvailable: data.contentAvailable || false,\n        delayWhileIdle: data.delayWhileIdle || false, // Deprecated from Nov 15th 2016 (will be ignored)\n        timeToLive: data.expiry - Math.floor(Date.now() / 1000) || data.timeToLive || 28 * 86400,\n        restrictedPackageName: data.restrictedPackageName,\n        dryRun: data.dryRun || false,\n        data: data.custom,\n        notification: {\n            title: data.title, // Android, iOS (Watch)\n            body: data.body, // Android, iOS\n            icon: data.icon, // Android\n            sound: data.sound, // Android, iOS\n            badge: data.badge, // iOS\n            tag: data.tag, // Android\n            color: data.color, // Android\n            click_action: data.clickAction || data.category, // Android, iOS\n            body_loc_key: data.locKey, // Android, iOS\n            body_loc_args: data.locArgs, // Android, iOS\n            title_loc_key: data.titleLocKey, // Android, iOS\n            title_loc_args: data.titleLocArgs, // Android, iOS\n        },\n    }\n```\n\n*data is the parameter in `push.send(registrationIds, data)`*\n\n* [See node-gcm fields](https://github.com/ToothlessGear/node-gcm#usage)\n\n**Note:** parameters are duplicated in data and in notification, so in fact they are being send as:\n\n```js\n    data: {\n        title: 'title',\n        message: 'body',\n        sound: 'mySound.aiff',\n        icon: undefined,\n        msgcnt: undefined\n        // Any custom data\n        sender: 'appfeel-test',\n    },\n    notification: {\n        title: 'title',\n        body: 'body',\n        icon: undefined,\n        sound: 'mySound.aiff',\n        badge: undefined,\n        tag: undefined,\n        color: undefined,\n        click_action: undefined,\n        body_loc_key: undefined,\n        body_loc_args: undefined,\n        title_loc_key: undefined,\n        title_loc_args: undefined\n    }\n```\n\nIn that way, they can be accessed in android in the following two ways:\n\n```java\n    String title = extras.getString(\"title\");\n    title = title != null ? title : extras.getString(\"gcm.notification.title\");\n```\n\n### PhoneGap compatibility mode\n\nIn case your app is written with Cordova / Ionic and you are using the [PhoneGap PushPlugin](https://github.com/phonegap/phonegap-plugin-push/), \nyou can use the `phonegap` setting in order to adapt to the recommended behaviour described in \n[https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/PAYLOAD.md#android-behaviour](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/PAYLOAD.md#android-behaviour).\n\n```js\n    const settings = {\n        gcm: {\n            id: '<yourId>',\n            phonegap: true\n        }\n    }\n```\n\n## APN\n\nThe following parameters are used to create an APN message:\n\n```js\n{\n    retryLimit: data.retries || -1,\n    expiry: data.expiry || ((data.timeToLive || 28 * 86400) + Math.floor(Date.now() / 1000)),\n    priority: data.priority === 'normal' ? 5 : 10,\n    encoding: data.encoding,\n    payload: data.custom || {},\n    badge: data.badge,\n    sound: data.sound || 'ping.aiff',\n    alert: data.alert || {\n        title: data.title,\n        body: data.body,\n        'title-loc-key': data.titleLocKey,\n        'title-loc-args': data.titleLocArgs,\n        'loc-key': data.locKey,\n        'loc-args': data.locArgs,\n        'launch-image': data.launchImage,\n        action: data.action,\n    },\n    topic: data.topic, // Required\n    category: data.category || data.clickAction,\n    contentAvailable: data.contentAvailable,\n    mdm: data.mdm,\n    urlArgs: data.urlArgs,\n    truncateAtWordEnd: data.truncateAtWordEnd,\n    collapseId: data.collapseKey,\n    mutableContent: data.mutableContent || 0,\n}\n```\n\n*data is the parameter in `push.send(registrationIds, data)`*\n\n* [See node-apn fields](https://github.com/node-apn/node-apn/blob/master/doc/notification.markdown)\n* **Please note** that `topic` is required ([see node-apn docs](https://github.com/node-apn/node-apn/blob/master/doc/notification.markdown#notificationtopic))\n\n## WNS\n\nThe following fields are used to create a WNS message:\n\n```js\nconst notificationMethod = settings.wns.notificationMethod;\nconst opts = Object.assign({}, settings.wns);\nopts.headers = data.headers || opts.headers;\nopts.launch = data.launch || opts.launch;\nopts.duration = data.duration || opts.duration;\n\ndelete opts.notificationMethod;\ndelete data.headers;\ndelete data.launch;\ndelete data.duration;\n\nwns[notificationMethod](regId, data, opts, (err, response) => { ... });\n\n```\n\n*data is the parameter in `push.send(registrationIds, data)`*\n\n* [See wns fileds](https://github.com/tjanczuk/wns)\n\n**Note:** Please keep in mind that if `data.accessToken` is supplied, each push notification will be sent after the previous one has been **responded**. This is because Microsoft may send a new `accessToken` in the response and it should be used in successive requests. This can slow down the whole process depending on the number of devices to send.\n\n## ADM\n\nThe following parameters are used to create an ADM message:\n\n```js\nconst data = Object.assign({}, _data); // _data is the data passed as method parameter\nconst consolidationKey = data.consolidationKey;\nconst expiry = data.expiry;\nconst timeToLive = data.timeToLive;\n\ndelete data.consolidationKey;\ndelete data.expiry;\ndelete data.timeToLive;\n\nconst ADMmesssage = {\n    expiresAfter: expiry - Math.floor(Date.now() / 1000) || timeToLive || 28 * 86400,\n    consolidationKey,\n    data,\n};\n```\n\n*data is the parameter in `push.send(registrationIds, data)`*\n\n* [See node-adm fields](https://github.com/umano/node-adm#usage)\n\n\n## Resources\n\n- [Node Push Notify from alexlds](https://github.com/alexlds/node-push-notify)\n\n## LICENSE\n\n```\nThe MIT License (MIT)\n\nCopyright (c) 2016 AppFeel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n*<p style=\"font-size: small;\" align=\"right\"><a color=\"#232323;\" href=\"http://appfeel.com\">Made in Barcelona with <span color=\"#FCB\"><3</span> and <span color=\"#BBCCFF\">Code</span></a></p>*\n",
  "_id": "node-pushnotifications@1.0.17",
  "dist": {
    "shasum": "c7b1779efe3b73ad0d6e789faf4a97ee15e48f7c"
  },
  "_from": "node-pushnotifications@",
  "_resolved": "https://registry.npmjs.org/node-pushnotifications/-/node-pushnotifications-1.0.17.tgz"
}
